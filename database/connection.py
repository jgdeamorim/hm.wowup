from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from config.settings import settings

# ğŸ”¹ CriaÃ§Ã£o do Engine otimizado para Railway e PostgreSQL
engine = create_engine(
    settings.DATABASE_URL,
    pool_size=10,          # ğŸ”¹ MÃ¡ximo de 10 conexÃµes abertas simultaneamente
    max_overflow=20,       # ğŸ”¹ Permite 20 conexÃµes extras temporÃ¡rias se o pool estiver cheio
    pool_pre_ping=True,    # ğŸ”¹ MantÃ©m a conexÃ£o ativa, evitando problemas de timeout
    connect_args={"options": "-c timezone=utc"}  # ğŸ”¹ ForÃ§a o PostgreSQL a trabalhar em UTC
)

# ğŸ”¹ Criando SessionLocal para Gerenciamento de SessÃµes
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# ğŸ”¹ Base para os Modelos SQLAlchemy
Base = declarative_base()

# ğŸ”¹ FunÃ§Ã£o para Obter a SessÃ£o do Banco de Dados
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
